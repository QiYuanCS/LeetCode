线性存储：用数组来保存二叉树
链式存储：用指针来连接左孩子连接下一个节点，连接右孩子连接下一个节点

深度优先搜索：通过递归的方式来实现
广度优先搜索：层序遍历
迭代法：非递归的方式

Struct TreeNode{
	Int val;
	TreeNode *left;
	TreeNode *right;
	TreeNode(int x) :  val(x), left(NULL), right(NULL) {}
};

中序遍历 非递归 迭代： 用指针来遍历节点，用栈记录访问过的元素，指针为空，

二叉树 层序遍历:
import java.util.*;

public class Solution {
	public List<List<Integer>> levelOrder(TreeNode root){
		Queue<TreeNode> queue = new LinkedList<>();
		List<List<Integer>> result = new ArrayList<>();

		if(root != null){
			queue.offer(root);
		}
		while(!queue.isEmpty()){
			int size = queue.size();
			List<Integer> vec = new ArrayList<>();

			for(int i = 0; i < size; i++){
				TreeNode node = queue.poll();
				vec.add(node.val);
				if(node.left != NULL){
					queue.offer(node.left);
				}
				if(node.right != NULL){
					queue.offer(node.right);
				}
			}
			result.add(vec);
		}
		return result;	
	}
}

